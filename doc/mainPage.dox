/*! \mainpage The oaEvent Library
  
  \section oaEvent Introduction

  This library provides the basic I/O functions for T2K ND280 software.

  The I/O is provided by ROOT which is used to save CP::TEvent objects and
  the TGeoManager description of the detector geometry.  The output to log
  files, and for debugging is controlled by the CP::TCaptLog class.  All of
  the classes are in the ND namespace.  This namespace should contain all
  ND280 code.  

  This library also provides the ability to read a MIDAS raw data file
  sequentially and return each record as a CP::TND280RawEvent. This object gives
  access to raw MIDAS banks but in order to interpret this data the, soon to
  be developed, oaRawEvent package must be present.

  \subsection eventFiles The ND280 Offline Event File Format

  ND280 event files are vanilla root files containing two objects,
  ND280Events, and ND280Geometry.  The first object is a TTree with a single
  branch containing events.  The second object is the geometry manager with
  the detector geometry used to generate the events.  The detector geometry
  can be browsed using the ROOT TBrowser, but due to a problem in the current
  ROOT (as of 5.10), you must be careful and only access the geometry using
  the right "All Folders" panel.  The event tree can be browsed, but it is not
  very useful since you can The best way to read and write ND280 event files
  is to use the CP::TRootInput and CP::TRootOutput classes.  These provide an
  interface to the TFile class and take care of some of the basic bookkeeping
  needed to process events.

  \subsection eventAccess Basic Event Access

  There is more documentation in \ref understandingTDatum where the design of
  the event structure is also described.

  The best frame work for accessing events is using an event loop which is
  documented in \ref eventLoop and CP::eventLoop().  Programs written
  using the event loop automatically handle reading of the input file (in
  both ROOT and MIDAS format), output to one or more files, loading of the
  geometry, and filtering of the trigger type.

  Events are saved using in TEvent which are derived from the
  TDataVector class.  TDataVector derived classes provide a name space for
  information within an event where the naming rules are very similar to
  the unix file system naming rules.  For instance, the "sbCATxz"
  CP::TAlgorithmResult object can be found in an event at "~/fits/sbCATxz".
  This refers to the "sbCATxz" TAlgorithmResult found in the "fits"
  CP::TDataVector object which in turn is contained in the over all
  CP::TEvent object.  Data within an event is accessed using the
  CP::TDatum::Use() or CP::TDatum::Get() methods.  The CP::TAlgorithmResult
  object mentioned above can be accessed as follows:

  \code
// Access using a reference and an exception trap.
try {
   CP::TAlgorithmResult& sbcat = event.Use<CP::TAlgorithmResult>("fits/sbCATxz");
   std::cout << "result found" << std::endl;
}
catch (ENoSuchElement) {
   std::cout << "result not found" << std::endl;
}
\endcode

\code
// Access by first checking that the object exists and then using a reference.
if (event.Has<CP::TAlgorithmResult>("fits/sbCATxz")) {
   CP::TAlgorithmResult& sbcat = event.Use<TAlgorithmResult>("fits/sbCATxz");
   std::cout << "result found" << std::endl;
}
\endcode

\code
// Access using a pointer that may be NULL.
CP::THandle<CP::TAlgorithmResult> sbcat = event.Get<CP::TAlgorithmResult>("fits/sbCATxz");
if (sbcat) {
   std::cout << "result found" << std::endl;
}
\endcode

\code
// Finally, there is a convenience method available to access
// TAlgorithmResults saved in the fits sub-directory.  
CP::THandle<CP::TAlgorithmResult> sbcat = event.GetFit("sbCATxz");
if (sbcat) {
   std::cout << "result found" << std::endl;
}
\endcode

You can get a list of the objects available within a particular event using
the dump-event.exe executable.  This program prints a directory of CP::TDatum
derived objects in an event.

\htmlonly
There is skeleton code available in 
<a href="../doc/exampleEventLoop.cxx">exampleEventLoop.cxx</a> that can
be copied to a local directory and modified.  If you use this code, do a
global search and replace on "UserLoop", changing it to some more useful
name.  That will help keep the doxygen documentation useful.
\endhtmlonly

\subsection Geometry Managing the Detector Geometry.

The description of the detector geometry is done using the ROOT TGeoManager
class.  This class provides a complete description of the locations as well
as the mass, densities, and composition of all components of the detector.
Access to the TGeoManager class is done through the
CP::TOADatabase::Geometry() method which makes sure the correct geometry
for a given event is loaded into memory.  Care should be taken using the
CP::TOADatabase::Geometry() method since it can (and often will) change the
geometry that is currently loaded.  It does this by checking which version
of the geometry should be used for the current event, loads the correct
geometry, and then applies the correct alignment constants to the
geometry.

\note CP::TOADatabase is a singleton class so this method is accessed using
CP::TOADatabase::Get().Geometry().

Since the current geometry description can change many times as different
events are accessed and lodaed, if your code needs to build tables of
detector locations, or other geometry details, it should register an object
derived from the CP::TOADatabase::GeometryChange class using
CP::TOADatabase::RegisterGeometryCalback().  This class will then be used
to update the tables whenever the geometry has been changed.  See the
CP::TOADatabase::GeometryChange class for more details and an example.

\subsection systemOfUnits The ND280 System of Units.

The ND280 code uses the same unit definitions as CLHEP.  These units are
standard within G4, and the large LHC experiments.  The unit values are
defined in HEPUnits.hxx and are in the unit namespace. 

The basic units are :
    - millimeter              (millimeter)
    - nanosecond              (nanosecond)
    - Mega electron Volt      (MeV)
    - positron charge         (eplus)
    - degree Kelvin           (kelvin)
    - the amount of substance (mole)
    - luminous intensity      (candela)
    - radian                  (radian)
    - steradian               (steradian)

All other units are derived from these basic definitions.  Notice one
surprising feature of these definitions.  The unit of mass is defined in
terms of energy (unit::MeV): that means that one kilogram is 1 unit::joule
* unit::second^2 * unit::meter^-2.  Numerically, this works out to be about
6.24 x 10^24 unit::MeV * unit::second^2 * unit::millimeter^-2 * unit::e_SI^-1.

As an example, lengths can be specified in several ways.  For instance to
specify a ten centimeter length, you might do the following:
\code
  double length1 = 10*unit::cm;
  double length2 = 100*unit::mm;
  double length3 = 0.1*unit::meter;
  double length4 = 0.0001*unit::km;
\endcode
The variables (length1, length2, length3, and length4) will all have the
same value.

The most common values that we use are unit::cm, unit::mm, unit::ns,
unit::second, unit::radian, and unit::degree.  The other definitions can be
found in HEPUnits.hxx along with multipliers such as unit::milli.  In
addition to units, basic physical constants are defined in the
HEPConstants.hxx file.

\subsection compiledVersion Tracking the compiled library version.

Each packages should provide a "version" class that is named by the convention
"T[package]" (for instance, ToaEvent, TeventDisplay, etc).  The simplest
version of this class can be implemented by copying ToaUtility.hxx and
ToaUtility.cxx to your package and replace "oaUtility" with the appropriate
package name.

When a executable uses a package, it should create an instance of
"T[package]" so that all of the package versions are saved. 

In addition to tracking the version of code used in an executable, the
"T[package].hxx" file should be used to document the package.  See the
ToaEvent.hxx file for an example.  The main package page should contained
information on how to use the package and what it is for.  It should also
point to the most important classes so that the user doesn't have to
speculate. 

\section doxygen Documenting the code with Doxygen

This is a really simple description of how to use doxygen.  Check out
the doxygen webpage for details (there is a link at the bottom of this
web page or <tt>http://www.doxygen.org/</tt>).  Document classes, members,
functions and variables using like this

\verbatim
/// The class documentation.  The first sentence is used as a brief
/// description of the class.
class bogus {
   /// Method documentation.  This can be as long as you want it to
   /// be and will go on the web page.
   int Method(void);

   /// This is a member.  
   int fMember;

   int fHolder ///< Documentation after the member.  Notice the "<".
};
\endverbatim



See related pages for release history, Recon Object Design and Usage, Understanding the ND280 Event Structure, Todo List,  Deprecated List and Bug list.
*/
