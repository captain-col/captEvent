/*! \page captEventHistory History for the captEvent Package 

\section captEvent_v0r0p0_history Version 0.0.0

Freeze information:
   - Freeze Date: Tue Nov  5 13:52:41 2013
   - Freeze User: mcgrew
   - Freeze Host: boxer.physics.sunysb.edu boxer.local 


First frozen version of captEvent for the CAPTAIN experiment.  This is
based off of the ND280 oaEvent library, and provides the definition of the
CAPTAIN offline event format.  The dependencies of this library are limited
to ROOT (and any of its dependencies).


\section captEvent_v1r0p0_history Version 1.0.0

Freeze information:
   - Freeze Date: Sat Jan 31 17:54:17 2015
   - Freeze User: mcgrew
   - Freeze Host: 


FEATURES

This includes many changes needed to adapt the library for use in the
CAPTAIN experiment.  An incomplete list includes

** Add new method of specifying the input method (for use with the
   captTrans library).  This adds and extends the TInputManager singleton. 

** Add better event loop options specific to CAPTAIN (e.g. set the
   geometry)

** Add channel id for the CAPTAIN TPC

** Add a copyright notice

** Add geometry identifiers for photosensors.

** Further adapt TReconTrack and TReconPID for use with CAPTAIN tracking




\section captEvent_v1r0p1_history Version 1.0.1

Freeze information:
   - Freeze Date: Tue Apr  7 12:03:30 2015
   - Freeze User: mcgrew
   - Freeze Host: boxer boxer 


BUG FIXES:

** Fix syntax error in the 010makecheck validation script.

NEW FEATURES:

** TEventContext: Define partitions to distinguish between CAPTAIN and
   miniCAPTAIN events.  This also adds a "!=" operator for TEventContexts
   to simplify comparisons.

** TMCDigit: Add the ability to carry along a vector of user information.
   The user information not specified, but it does need to be matched
   between the electronics simulation and the later users.  The initial use
   is to pass the true amount of charge deposited in a digit.


\section captEvent_v1r1p0_history Version 1.1.0

Freeze information:
   - Freeze Date: Mon Feb 22 15:43:02 2016
   - Freeze User: mcgrew
   - Freeze Host: boxer boxer 


This is a new release in preparation for handling photon detection system
hits and incorporating many improvements introduced during commissioning.

FEATURES:

* Introduce specialized TFADCHit to handle hits from the flash ADCs.  The
  pulse shape is included for the region of interest as defined by a start
  and stop sample.

* Make C++11 compatible.  This is still compatible with C++98.

* Adapt to work with both ROOT 5.34.34 and ROOT 6.xx.

* Add a TChannelId derived class for the photon detection system.  

* Separate the declaration and definition of template methods.

* Add geometry ids for the wavelength shifting plates.

* Upgrade the THandle<> template to handle weak references (in addition to
  the strong references it's always handled).  The new handle is backward
  compatible and source compatible with the older version.  A regular
  (strong/shared) handle which will keep an object in memory can be changed
  into a weak handle using the MakeWeak() method.  The "weakness" then
  follows the variable (not the object pointed to). A weak handle will not
  prevent an object from being deleted, and will return NULL if the object
  is no longer available.

SIGIFICANT BUGS FIXED:

* Handle multiple versions of the geometry files and choose the right ones.

* Make sure all the TSingleHit fields are copied by the copy constructor.


\section captEvent_v1r2p0_history Version 1.2.0

Freeze information:
   - Freeze Date: Tue Feb 13 09:17:44 2018
   - Freeze User: mcgrew
   - Freeze Host: boxer boxer.physics.sunysb.edu 


A (likely) final freeze before changing the TReconState format.


\section captEvent_v2r0p0_history Version 2.0.0

Freeze information:
   - Freeze Date: Tue Feb 13 09:33:36 2018
   - Freeze User: mcgrew
   - Freeze Host: boxer boxer.physics.sunysb.edu 


Create a new major version to flag a significant change in the underlying
object format for TReconState derived objects.   Hopefully, none of the
changes will affect code using this library.

This change is prompted because the original interface depended on the use
of multiply inherited mix-in classes to implement the different types of
fields that appear in a class describing the reconstruction state.  For
instance, the direction occurs in TShowerState, and TTrackState (&c), but
not TVertexState.  In the original interface, the direction was handled by
the TMDirectionState class that was added to the objects which contained a
direction, and this prevented code duplication.

Unfortunately, ROOT6 apparently does not support multiple inheritance, so
the old implementation needs to be changed. The solution that has been
chosen is to use C macros to capture the duplicated interface.  It's not as
C++y, but should have longevity.

The initial implementation probably can't read old files containing
TReconState derived objects, but very few of those files have been
generated (in CAPTAIN).  It *may* be possible to change this code to make
the old files forward compatible, but that is not a priority right now.

*/