#ifndef TDigitMananger_hxx_seen
#define TDigitMananger_hxx_seen

#include <map>
#include <string>

#include "ECore.hxx"
#include "TDigit.hxx"
#include "TEvent.hxx"
#include "TDigitContainer.hxx"
#include "TDigitProxy.hxx"
#include "THandle.hxx"

namespace CP {
    /// An exception from the digit manager.
    EXCEPTION(EDigitManager, EDigit);

    /// A factory was registered more than once.
    EXCEPTION(EMultipleDigitFact, EDigitManager);

    /// Attempting to cache digits without an event available
    EXCEPTION(EDigitEventMissing, EDigitManager);

    class TDigitManager;
    class TDigitFactory;
    class TManager;
};

/// A base class to provide a way to build digits from the MIDAS data accessed
/// using oaRawEvent.  The oaUnpack library will implement a digit factory
/// for each class of data and register them with TDigitManager.  The digit
/// factory type is given by the name of the TDigitContainer that will be
/// generated in the TEvent.
class CP::TDigitFactory {
public:
    explicit TDigitFactory(std::string name);
    virtual ~TDigitFactory();

    /// Return the name of the factory.  There can only be one factory with a
    /// given name.  The name of the factory will be used as the name of the
    /// TDigitContainer that is generated by the factory.
    std::string GetName();

    /// Return a pointer to a new TDigitContainer.  The name of the
    /// TDigitContainer will be set by the TDigitManager.  If the factory
    /// fails for any reason, a NULL should be returned.
    virtual CP::TDigitContainer* MakeDigits() = 0;

private:
    
    /// The name of the factory.
    std::string fName;
};

/// Manage the current set of TDigit objects and containers.  This manager
/// class is a singleton accessed through the TManager class
/// (TManager::Digits() will return a reference).  This is mostly an
/// internal implementation class used to provide management to the
/// TDigitProxy class and to provide a connection to the raw data access in
/// oaRawEvent (using oaUnpack).  This class will not be directly used by most
/// people.  The TDigitManager is owned by TManager.
class CP::TDigitManager {
    friend class CP::TManager;
    friend class CP::TDigitProxy;

public: 
    ~TDigitManager();

    /// Register a TDigitFactory class.  The TDigitFactory classes are used to
    /// fill the cache of digits.  The will be registered by oaUnpack, and
    /// called as required by oaEvent to fill the digit cache.  This method
    /// takes ownership of the digit factory.
    void RegisterFactory(CP::TDigitFactory* factory);

    /// Save digits in the event as a temporary bank (default).
    void TemporaryDigits(void) {fPersistentDigits=false;}

    /// Save digits in the event as a persistent bank (and increase the event
    /// size).  Saving persistent digits increases the size of the output file
    /// by a large factor (between 2 and 6 times larger), and should only be
    /// used as a diagnostic tool.
    void PersistentDigits(void) {fPersistentDigits=true;}

    /// @{A Low level interface used to implement TEvent::GetDigits().  The
    /// higher level digit interface, TEvent::GetDigits() should be prefered.
    /// This gets the digit container for a type of data.  If the digits are
    /// available, this will return a valid handle to the container, otherwise
    /// it will return a "NULL" handle.  This first checks to see if the
    /// requested digits have already been unpacked using the available digit
    /// factories, and then if necessary, will use the factories to find the
    /// digits.  By default, the cached digits are saved as temporary banks,
    /// but can be made persistent using
    /// TManager::Get().Digits().PersistentDigits().
    CP::THandle<CP::TDigitContainer> CacheDigits(std::string type);
    CP::THandle<CP::TDigitContainer> CacheDigits(CP::TEvent& event,
                                                 std::string type);
    /// @}

    /// Check if a TDigitFactory is available for a particular type of digits.
    bool FactoryAvailable(std::string type) const;

private: 
    typedef std::map<std::string, CP::TDigitFactory*> FactoryMap;

    /// Construct a new TDigitManager.  This is private since it should only
    /// be constructed by the friend class TManager.
    TDigitManager();

    /// Make the copy constructor private.
    TDigitManager(const TDigitManager&) {MayNotUse("Copy Constructor");}

    /// Translate a proxy into a digit pointer.  Note that this has strange
    /// ownership rules since the ownership of the TDigit is not passed to the
    /// caller.
    TDigit* GetDigit(const TDigitProxy& proxy);

    /// Get the digit container for a proxy.  This will return a handle to the
    /// TDigitContainer which will be valid if the digits are found.  This is
    /// used to implement TDigitManager::GetDigit().  Users should use
    /// TDigitManager::CacheDigits() to access the TDigitContainer objects.
    CP::THandle<CP::TDigitContainer> FindDigits(const TDigitProxy& proxy);

    /// A map of factories available to build the cache of digits.
    FactoryMap fFactories;

    /// Flag that digits are kept as persistent banks.
    bool fPersistentDigits;

};
#endif
